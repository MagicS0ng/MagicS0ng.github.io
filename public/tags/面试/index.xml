<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>面试 on 😶‍🌫️Kris的Neverland</title>
    <link>https://magics0ng-github-io.pages.dev/tags/%E9%9D%A2%E8%AF%95/</link>
    <description>Recent content in 面试 on 😶‍🌫️Kris的Neverland</description>
    <generator>Hugo -- 0.138.0</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 09 Dec 2024 17:09:59 +0800</lastBuildDate>
    <atom:link href="https://magics0ng-github-io.pages.dev/tags/%E9%9D%A2%E8%AF%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>快手客户端一面</title>
      <link>https://magics0ng-github-io.pages.dev/posts/%E5%BF%AB%E6%89%8B%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%80%E9%9D%A2/</link>
      <pubDate>Mon, 09 Dec 2024 17:09:59 +0800</pubDate>
      <guid>https://magics0ng-github-io.pages.dev/posts/%E5%BF%AB%E6%89%8B%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%80%E9%9D%A2/</guid>
      <description>&lt;h1 id=&#34;自我介绍&#34;&gt;自我介绍&lt;/h1&gt;
&lt;h1 id=&#34;c&#34;&gt;C++&lt;/h1&gt;
&lt;h2 id=&#34;对象初始化&#34;&gt;对象初始化&lt;/h2&gt;
&lt;p&gt;回答会根据传递的参数，调用不同的重载。
面试官问还有吗？不知道问的什么，然后继续问了虚函数。&lt;/p&gt;
&lt;h2 id=&#34;虚函数&#34;&gt;虚函数&lt;/h2&gt;
&lt;p&gt;成员函数，通过&lt;code&gt;virtual&lt;/code&gt;修饰，子类继承时可以选择是否重载，也可以通过&lt;code&gt;virtual 成员函数=0&lt;/code&gt;的方式声明为纯虚函数，子类必须重载。&lt;/p&gt;
&lt;h3 id=&#34;虚函数指针&#34;&gt;虚函数指针&lt;/h3&gt;
&lt;h2 id=&#34;new-delete-malloc-free&#34;&gt;new delete, malloc free&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;C++&lt;/code&gt;可以视作&lt;code&gt;C&lt;/code&gt;的超集，&lt;code&gt;C++&lt;/code&gt;继承了&lt;code&gt;C&lt;/code&gt;的&lt;code&gt;malloc&lt;/code&gt;和&lt;code&gt;free&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;new--delete&#34;&gt;new / delete&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;new
&lt;ol&gt;
&lt;li&gt;动态申请内存，返回对应对象类型的指针，&lt;/li&gt;
&lt;li&gt;调用类的构造函数，并进行初始化，访问了内存，涉及到虚实地址变换&lt;/li&gt;
&lt;li&gt;申请失败会抛出异常&lt;code&gt;std::bad_alloc&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;delete
&lt;ol&gt;
&lt;li&gt;释放通过new申请的空间；&lt;/li&gt;
&lt;li&gt;调用类的析构函数&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;补充：可以通过&lt;code&gt;new(nothrow)&lt;/code&gt;返回空指针; &lt;code&gt;new&lt;/code&gt;和&lt;code&gt;delete&lt;/code&gt;是&lt;code&gt;C++&lt;/code&gt;运算符可以重载。是否访问内存取决于具体的初始化逻辑，虚实地址变换由操作系统完成。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;malloc--free&#34;&gt;malloc / free&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;malloc
&lt;ol&gt;
&lt;li&gt;申请内存，返回&lt;code&gt;void&lt;/code&gt;类型的指针，&lt;/li&gt;
&lt;li&gt;不进行初始化，因此没有访存&lt;/li&gt;
&lt;li&gt;申请失败，返回&lt;code&gt;NULL&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;free
&lt;ol&gt;
&lt;li&gt;释放通过malloc申请的空间；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;补充：&lt;code&gt;malloc&lt;/code&gt;和&lt;code&gt;free&lt;/code&gt;是&lt;code&gt;C&lt;/code&gt;的函数。不支持重载&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;内存布局&#34;&gt;内存布局&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;栈： 自动管理，速度比较快，超出作用域自定析构&lt;/li&gt;
&lt;li&gt;堆：手动管理，通过裸指针申请时，必须手动析构；也可以通过智能指针管理&lt;/li&gt;
&lt;li&gt;全局区data：初始化的全局变量和静态变量&lt;/li&gt;
&lt;li&gt;代码区text：代码段，存储函数，和类的静态成员函数&lt;/li&gt;
&lt;li&gt;bss区：未初始化的全局变量和静态变量，默认为0&lt;/li&gt;
&lt;li&gt;rodata区：只读数据，常量&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;线程-进程区别&#34;&gt;线程 进程区别&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;进程
&lt;ol&gt;
&lt;li&gt;进程享有自己的地址空间，因此多进程之间是隔离的，一个进程的崩溃往往不会导致其他进程崩溃&lt;/li&gt;
&lt;li&gt;进程通信比较复杂&lt;/li&gt;
&lt;li&gt;进程是资源分配的基本单位&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;线程
&lt;ol&gt;
&lt;li&gt;多个线程共享一个进程的地址空间，因此一个线程崩溃有可能导致其他线程的崩溃&lt;/li&gt;
&lt;li&gt;线程通信简单，因此需要频繁交互任务可以使用多线程。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;补充：进程通信包括：管道，共享内存，消息队列，socket，信号，信号量；线程通信主要包括：互斥锁，条件变量，信号量，原子操作，互斥量，读写锁。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;数据库索引&#34;&gt;数据库索引&lt;/h1&gt;
&lt;p&gt;尴尬，答成引擎了。然后又回答一遍&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;B+： 多路平衡，高度比较矮，快速查询，叶子节点为链表结构，支持范围查询，非叶子节点存储索引节点，叶子节点存储数据&lt;/li&gt;
&lt;li&gt;B：不支持范围查询，非叶子节点也可以存储数据&lt;/li&gt;
&lt;li&gt;单列索引：单个字段创建索引&lt;/li&gt;
&lt;li&gt;联合索引：多个字段创建索引，需要主要最左匹配原则&lt;/li&gt;
&lt;li&gt;补充：哈希索引：快速查找，无法排序，不支持范围查询，&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;项目&#34;&gt;项目&lt;/h1&gt;
&lt;p&gt;问到有没有测过并发量。回答没有，但是根据之前测试线程池的经验，应该可以支持1w用户。&lt;/p&gt;
&lt;h1 id=&#34;网络部分&#34;&gt;网络部分&lt;/h1&gt;
&lt;h2 id=&#34;浏览器访问url到渲染页面的具体过程&#34;&gt;浏览器访问url到渲染页面的具体过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;DNS解析
&lt;ol&gt;
&lt;li&gt;有缓存先查缓存&lt;/li&gt;
&lt;li&gt;没有缓存，查询根域名服务器，根域名服务器通过树状结构查询顶级域名服务器，顶级域名查询负责该域名的权威域名服务器&lt;/li&gt;
&lt;li&gt;权威域名服务器返回IP地址&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;TCP握手&lt;/li&gt;
&lt;li&gt;IP&lt;/li&gt;
&lt;li&gt;同一个子网，通过arp寻找对应的mac，不同子网通过默认路由转发，通过路由器自动更新下一跳的mac地址寻找目标mac地址&lt;/li&gt;
&lt;li&gt;封装http消息，请求行，请求头，请求体，&lt;/li&gt;
&lt;li&gt;通过交换机或路由器将信息转为二进制流，发送到目标主机&lt;/li&gt;
&lt;li&gt;服务器收到后通过拆包，协议栈自底向上到达应用层，知道是http消息，取出对应的资源，以响应行：status_code等，响应头，响应体，经协议栈自顶向下发送&lt;/li&gt;
&lt;li&gt;客户端收到消息，通过浏览器渲染得到页面&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;如何加快http的速度&#34;&gt;如何加快http的速度&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;选择压缩算法，压缩消息体&lt;/li&gt;
&lt;li&gt;服务器负载均衡，返回最近的最快的服务器&lt;/li&gt;
&lt;li&gt;选择合适的协议，因为TCP很慢，所以http3.0 使用了UPD实现了quic&lt;/li&gt;
&lt;li&gt;将用户访问过的资源，在本地缓存&lt;/li&gt;
&lt;li&gt;补充：其他优化方式：合并多个css、js使用一个http连接发送，减少请求数量；异步加载js；使用高效的图像压缩算法，压缩图像&lt;/li&gt;
&lt;li&gt;补充缓存：
&lt;ol&gt;
&lt;li&gt;浏览器缓存：通过设置适当的缓存策略（如Cache-Control、Expires）在浏览器端缓存常用资源，避免每次请求都重新从服务器加载资源，显著提高页面加载速度。&lt;/li&gt;
&lt;li&gt;CDN缓存：内容分发网络（CDN）将资源缓存到离用户更近的节点，通过地理位置分发减少网络延迟，提升响应速度。&lt;/li&gt;
&lt;li&gt;服务器端缓存：对于常用的动态资源（如数据库查询结果），可以使用 Redis 或 Memcached 等缓存技术，减少数据库的压力，快速返回常见请求的结果。&lt;/li&gt;
&lt;li&gt;服务工作者缓存：现代浏览器提供服务工作者（Service Workers）来缓存资源并提供离线支持，使得即使没有网络，用户也可以继续使用应用程序。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;手撕-二叉树最近公共祖先&#34;&gt;手撕 二叉树最近公共祖先&lt;/h1&gt;
&lt;p&gt;ACM模式，写出函数讲解思路&lt;/p&gt;</description>
    </item>
    <item>
      <title>金山二面</title>
      <link>https://magics0ng-github-io.pages.dev/posts/%E9%87%91%E5%B1%B1%E4%BA%8C%E9%9D%A2/</link>
      <pubDate>Thu, 05 Dec 2024 17:19:33 +0800</pubDate>
      <guid>https://magics0ng-github-io.pages.dev/posts/%E9%87%91%E5%B1%B1%E4%BA%8C%E9%9D%A2/</guid>
      <description>12/05/2024 金山wpsC++二面</description>
    </item>
    <item>
      <title>金山一面</title>
      <link>https://magics0ng-github-io.pages.dev/posts/%E9%87%91%E5%B1%B1%E4%B8%80%E9%9D%A2/</link>
      <pubDate>Tue, 03 Dec 2024 17:39:51 +0800</pubDate>
      <guid>https://magics0ng-github-io.pages.dev/posts/%E9%87%91%E5%B1%B1%E4%B8%80%E9%9D%A2/</guid>
      <description>12/03/2024 金山wpsC++一面</description>
    </item>
  </channel>
</rss>
